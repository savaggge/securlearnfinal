Этап проектирования и моделирования играет ключевую роль при создании веб-приложений. Именно на этом этапе закладываются основные принципы построения системы, формируется её структура и определяются ключевые процессы, обеспечивающие корректную и безопасную работу сайта.
Процесс начинается с детального изучения требований, включающего сбор информации о целевой аудитории, особенностях фармацевтического ассортимента, механизмах покупки и оформления заказов. Также анализируются внешние и внутренние процессы, определяются границы системы и способы их оптимизации. На этом этапе важно учесть как основные функции (поиск, фильтрация, оплата, доставка), так и нефункциональные требования — такие как стабильность работы, защита данных и масштабируемость системы под рост числа пользователей.
Для построения модели системы применяются современные подходы, в том числе визуальное моделирование с использованием диаграмм UML. Эти схемы позволяют отразить, как пользователи будут взаимодействовать с системой, какие данные обрабатываются, как между собой связаны различные модули. 

2.1 Поведенческое и функциональное моделирование
Наиболее часто применяются диаграммы вариантов использования, активности, классов и последовательностей — каждая из которых помогает детализировать разные аспекты функционирования системы.
На следующем этапе проектирования формируется архитектура решения: выбирается способ организации компонентов (например, микросервисы), продумываются каналы взаимодействия между ними и разрабатывается структура базы данных. Также создаются схемы взаимодействия с внешними сервисами — платёжными системами, службами доставки и поставщиками. Особое внимание уделяется вопросам безопасности: реализуется защита персональных данных, механизмы авторизации, шифрование информации при передаче и хранении.

Поведенческое моделирование веб-системы
Для лучшего понимания логики функционирования веб-сайта, используется поведенческое моделирование. Этот подход помогает наглядно представить, как система реагирует на действия пользователей и различные внутренние события.

Диаграммы активности применяются для отображения последовательности действий в рамках конкретного сценария. Они хорошо подходят для моделирования процесса оформления заказа — от выбора товара и добавления его в корзину до подтверждения оплаты и получения уведомления. Такие диаграммы помогают выявить лишние шаги, потенциальные задержки или логические ошибки в пользовательских процессах.

Диаграммы состояний описывают, в каких состояниях может находиться тот или иной элемент системы, и что вызывает переходы между этими состояниями. Они могут быть полезны в сценариях где, система по-разному взаимодействует с пользователем  в зависимости от состояния элемента системы. Как пример, товар может быть в состоянии «В наличии», «Закончился», «Ожидается поставка» — и в зависимости от этого система разрешает или запрещает добавление в корзину.

Использование поведенческой модели позволяет учесть не только стандартные действия, но и критические ситуации. Например, можно смоделировать поведение системы при сбое платёжной системы, при попытке оформить заказ без регистрации, или если пользователь вводит некорректные данные. Это важно для повышения устойчивости сайта и качества пользовательского опыта.


2.1.1 Метод IDEF0 в проектировании системы
Методология IDEF0 представляет собой инструмент функционального моделирования, который используется для описания и визуализации процессов системы на логическом уровне. Она позволяет показать, какие функции выполняются в системе, что на них влияет, какие ресурсы используются и какие результаты получаются на выходе. Диаграмма строится по принципу "что делает система", "что ей нужно для этого" и "что получается в результате".

Основные элементы диаграммы IDEF0:
	Вход (Input) — это всё, что поступает в процесс и подлежит обработке. В случае интернет-аптеки это могут быть данные пользователя, параметры поиска, содержимое корзины и прочее. Вход всегда указывается слева от блока.

	Выход (Output) — результат работы функции. Это, например, сформированный заказ, квитанция об оплате, отчёт для администратора или уведомление пользователю. Выход указывается справа от блока.

	Механизм (Mechanism) — ресурсы, которые участвуют в выполнении функции. Это может быть серверное ПО, база данных, сотрудники службы поддержки, платёжные шлюзы и т. д. Располагаются внизу блока.

	Управление (Control) — правила и условия, регулирующие выполнение процесса. Это нормативные акты, стандарты безопасности, политика хранения персональных данных, внутренняя документация по обслуживанию клиентов. Контролирующие элементы указываются сверху блока.









 
Изображение 2.1 – IDEF0-диаграмма процесса добавления товара

 	На изображении представлена диаграмма, выполненная по методологии IDEF0, которая описывает один из ключевых процессов в системе интернет-аптеки — добавление нового товара. Такая диаграмма помогает показать, как проходит процесс, какие данные участвуют, что влияет на выполнение, какие ресурсы используются и какой результат получается.

Основной процесс
В центре диаграммы показана функция "Creation of product" (Создание продукта) — это добавление информации о товаре (лекарстве или медицинском изделии) в систему с последующим сохранением в базе и отображением на сайте.

Входные данные
Слева подключён вход — Product Details (Детали товара). Это всё, что вводит администратор: название препарата, дозировка, форма выпуска, цена, производитель и т.д.

Управление
Сверху на процесс влияют два управляющих элемента:
	Business Rules (Бизнес-правила) — внутренние правила, по которым должен оформляться товар;
	Legislation Pacts (Законодательные акты) — внешние требования, регулирующие продажу фармацевтической продукции.
Они определяют, можно ли добавить тот или иной продукт, и какие поля обязательны.
Механизмы
Снизу подключены два механизма:
	Validate input data (Проверка данных) — система проверяет, все ли поля заполнены правильно и нет ли ошибок;
	Add Product to Database (Сохранение в базу) — сохранение корректных данных в систему для дальнейшего использования.

Выходные данные
Выходом (справа) является Display Added Product (Отображение товара) — то есть успешно добавленный товар становится доступным на сайте для покупателей.

Данная диаграмма помогает чётко увидеть структуру процесса добавления товаров и понять, какие данные и правила участвуют. Такой подход упрощает анализ и настройку бизнес-логики в проектируемой системе.

2.1.2 Метод IDEF3 в проектировании системы
Диаграмма IDEF3 ориентирована на более детальное описание последовательности операций, отображая сценарии выполнения процессов. Она позволяет детализировать конкретные события, показывая этапы выполнения и причинно-следственные связи.
 
Изображение 2.2 – IDEF3-диаграмма добавления товара в систему
На изображении 2.2 представлена IDEF3-диаграмма, описывающая последовательный процесс добавления нового фармацевтического продукта в базу данных онлайн-магазина. Данный тип диаграммы используется для моделирования поведения системы, показывая, в каком порядке выполняются действия, как обрабатываются данные и какие условия влияют на развитие процесса.
Ключевые шаги процесса:
	Блок 1 — Receiving User Input (Получение данных от пользователя):
Процесс начинается с ввода информации о новом товаре (название, дозировка, форма выпуска, производитель, цена и т.д.) через интерфейс администратора.
	Блок 2 — Validating Input Data (Проверка введённых данных):
Далее система выполняет валидацию: проверяет обязательные поля, корректность форматов и соответствие требованиям.
	Узел J1 — Логическая развилка:
В зависимости от результата проверки возможны два сценария:
	Validation Failed (Ошибка валидации): происходит переход к Блоку 3 — View Reload, где администратор видит уведомление об ошибке и может повторно внести корректные данные.
	Validation Success (Успешная проверка): процесс продолжается.
	Блок 4 — Product Created (Создание объекта товара):
После успешной проверки формируется объект продукта в памяти приложения.
	Блок 6 — Product Object Sent to DB (Отправка объекта в базу данных):
Система инициирует процесс сохранения данных в базу.
	Блок 7 — Product Added to DB (Добавление в БД):
Продукт сохраняется в базе данных и становится частью доступного ассортимента.
	Блок 8 — Product Retrieved and Displayed from DB (Получение и отображение товара):
После добавления продукт сразу же отображается в пользовательской части сайта (например, в списке новинок или по результатам поиска).
Описание логики и структуры:
Диаграмма отражает пошаговый процесс добавления товара, акцентируя внимание на проверке введённых данных. Логическая точка J1 разделяет сценарии на успешный и ошибочный, что повышает надёжность обработки.
После создания и сохранения объекта товар сразу отображается на сайте, что важно для оперативного обновления ассортимента, особенно при частых поставках.
Модель IDEF3 наглядно демонстрирует весь жизненный цикл процесса — от ввода до отображения. Такая визуализация помогает лучше понять бизнес-логику и оптимизировать систему.

2.2 Архитектурное моделирование и структура системы

В процессе проектирования и разработки информационной системы интернет-магазина по продаже фармацевтической продукции была выбрана многоуровневая архитектура, сочетающая принципы микросервисного подхода и Clean Architecture. Это позволило создать модульную, масштабируемую и легко сопровождаемую систему с чётким разделением ответственности между компонентами.
2.2.1 Архитектурные принципы, реализованные во всех микросервисах

Независимо от их функциональной направленности, все микросервисы в проекте следуют единым архитектурным правилам:
	Изоляция данных
Каждый микросервис использует собственную базу данных, развернутую в Microsoft SQL Server (MSSQL). Это обеспечивает слабую связность между сервисами и позволяет развивать их независимо.
	Уникальные идентификаторы
Все сущности системы идентифицируются с помощью GUID, что гарантирует уникальность записей в распределённой архитектуре.
	Взаимодействие через REST API
Коммуникация между микросервисами осуществляется только через HTTP-запросы в формате JSON. Прямой доступ к данным других сервисов исключён.
	Инкапсуляция доступа к данным
Работа с БД осуществляется через репозитории и сервисный слой, соответствующие принципам чистой архитектуры. Это позволяет изолировать бизнес-логику от инфраструктурных зависимостей.
	ORM и Code First подход
Все модели отображаются в таблицы базы данных с помощью Entity Framework Core, с использованием подхода Code First, что облегчает миграции и автоматическое создание схем данных.

2.2.2 Применение Clean Architecture

Каждый микросервис построен по принципам Clean Architecture, предусматривающим логическое разделение приложения на слои:
	Domain – содержит бизнес-сущности и интерфейсы, независимые от инфраструктуры;
	Application – реализует бизнес-правила, сервисные интерфейсы и DTO;
В данном проекте слои Domain и Application были объединены в единый слой Core для упрощения структуры. Core содержит все ключевые элементы предметной области и остаётся изолированным от внешней среды.
	Infrastructure – взаимодействие с базой данных, реализация репозиториев, интеграция с внешними API;
	Presentation (Web API) – слой взаимодействия с клиентом, маршрутизация и контроллеры.
Такая архитектура обеспечивает модульность, повышает тестируемость и позволяет вносить изменения в инфраструктуру без затрагивания бизнес-логики.

2.2.3 Структура микросервисов и слоёв приложения

Функциональность системы распределена между следующими микросервисами:
	ProductMicroservice – управление товарами, категориями, производителями и поставщиками;
	UsersMicroservice – работа с пользователями, ролями и профилем;
	OrdersMicroservice – обработка заказов и их содержимого;
	CartMicroservice – управление корзиной пользователя;
	NotificationMicroservice – отправка уведомлений;
	WarehouseMicroservice – управление информацией о складах и остатках.
Каждый из микросервисов является полностью автономным и содержит собственные модели, репозитории, сервисы и базу данных.

DTO и маппинг данных
Для обмена данными между слоями и сервисами используются DTO (Data Transfer Objects). Это обеспечивает:
	изоляцию бизнес-логики от внешнего API;
	удобную сериализацию и передачу данных в формате JSON;
	безопасность — за счёт исключения ненужных или чувствительных данных из внешних моделей.

Сервисный и репозиторный слои
Бизнес-логика каждого микросервиса реализуется через сервисный слой, обращающийся к базе данных через репозитории, построенные по принципу инверсии зависимостей. Это упрощает тестирование, поддержку и расширение логики без влияния на хранилище данных.
Структура DTO-объектов, а также схемы взаимодействия сервисного и репозиторного слоёв представлены на соответствующих диаграммах, включённых в Приложение А.

Безопасность и масштабируемость
Система поддерживает аутентификацию и авторизацию с разграничением прав доступа. Архитектура спроектирована так, чтобы каждый микросервис мог масштабироваться независимо, без влияния на работу других компонентов.
Перед описанием конкретных моделей логично перейти к их структуре. Ниже приведено описание классовой структуры микросервисов, отражающее связи и основные сущности системы.

2.3 Классовая модель предметной области

Каждый микросервис включает собственный набор моделей, адаптированных под его функциональность. В основе проектирования моделей использован подход Code First с применением Entity Framework Core, а сами структуры построены в соответствии с принципами Clean Architecture.
Ниже представлено описание моделей, входящих в состав каждого микросервиса:
— ProductMicroservice, WarehouseMicroservice, OrdersMicroservice, CartMicroservice, UsersMicroservice и NotificationMicroservice.

ProductMicroservice
ProductMicroservice отвечает за хранение и управление информацией о фармацевтических товарах и их категоризации. 
Основные модели:
1.	Product — основная сущность, содержащая полное описание товара:
	Id, Name, Description, Price, Discount, ImageUrl
	Dosage, Form, Manufacturer, Supplier
	StorageConditions, ExpiryDate
	PrescriptionRequired, IsAdultRequired
	CreatedAt, UpdatedAt
	Связи:
	один-ко-многим с WarehouseProduct
	многие-ко-многим с Category через ProductCategory
2.	Category — категория товара для фильтрации и логической группировки:
	Id, Name, IsAdultRequiredByDefault
	Связь с товарами реализуется через ProductCategory
3.	ProductCategory — промежуточная таблица для связи "многие-ко-многим":
	ProductId, CategoryId

WarehouseMicroservice
WarehouseMicroservice управляет информацией о складах и остатках товаров. 
Основные модели:
1.	Warehouse — представляет физическое место хранения:
	Id, Name, Location
2.	WarehouseProduct — связь между товарами и складами с количеством:
	ProductId, WarehouseId
	QuantityOnCurrentWarehouse, UpdatedAt
	Навигационные свойства: Product, Warehouse
UserMicroservice
UserMicroservice реализован на основе ASP.NET Core Identity и отвечает за управление пользователями и их ролями.
Основные модели:
1.	ApplicationUser — расширенная модель пользователя:
	Личные данные: FirstName, LastName, DateOfBirth, Gender
	Адрес: Country, City, Address, PostalCode
	IsAdult — флаг возрастного ограничения
2.	ApplicationUserRole — связь с ролями (IdentityRole):
	Роли в системе:
	User — покупатель
	Manager — сотрудник
	Admin — администратор
	Гость — неавторизованный пользователь
OrdersMicroservice
OrdersMicroservice отвечает за хранение заказов, их содержимое и информацию о доставке.
Основные модели:
1.	Order — основной заказ:
	Id, UserId, WarehouseId
	TotalPriceOrder, OrderStatus
	CreatedAt, UpdatedAt
	Вложенный объект: ShippingDetails
	Связь: список OrderItems
2.	OrderItem — отдельная позиция заказа:
	Id, ProductId, ProductName, Quantity, Price, TotalPriceOrderItem
3.	ShippingDetails — встроенная структура:
	Address, PostalCode, Country, PhoneNumber, EmailAddress

CartMicroservice
CartMicroservice управляет временным хранилищем товаров, выбранных пользователем.
Основные модели:
1.	Cart — корзина пользователя:
	Id, UserId, CartItems, TotalPriceCart, CreatedAt, UpdatedAt
2.	CartItem — позиция в корзине:
	ProductId, ProductName, Quantity, Price, TotalPriceCartItem

NotificationMicroservice
NotificationMicroservice отвечает за хранение уведомлений и отправку сообщений пользователям.
Основная модель:
1.	Notification — уведомление:
	Id, RecipientEmail, Subject, Message, CreatedAt
Модель логически связана с ApplicationUser через поле RecipientEmail, но не имеет жёсткой зависимости в БД.

Визуальное представление классовой структуры микросервисов представлено в Диаграмме классов системы, с которой можно ознакомиться в Приложении Б.

Таким образом, в результате этапов моделирования и проектирования была сформирована архитектура системы, определены основные сущности предметной области, их связи и структура микросервисов. Проект опирается на современные принципы построения распределённых систем и служит надёжной основой для последующей реализации.
Следующая глава посвящена практической реализации системы с использованием выбранных технологий, архитектурных решений и подходов к организации взаимодействия между компонентами.
